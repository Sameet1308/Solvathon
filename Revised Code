import pandas as pd

import numpy as np

import xgboost as xgb

import matplotlib.pyplot as plt

from sklearn.model_selection import GridSearchCV

 

# Load your cleaned dataset (data from 2010 to 2022)

data = pd.read_csv('crude.csv')

 

# Filter data for years 2020 to 2025 (future years)

future_years = [2020, 2021, 2022, 2023, 2024, 2025]

predict_data = data[data['Year'].isin(future_years)]

 

# Filter data for training (years 2010 to 2021)

train_data = data[(data['Year'] >= 2010) & (data['Year'] <= 2021)]

 

# Separate the features (X) and target (y) for training

X_train = train_data.drop(columns=['Crude_Oil_Demand_1000bpd'])

y_train = train_data['Crude_Oil_Demand_1000bpd']

 

# Separate the features (X) for prediction (years 2023 to 2025)

X_predict = predict_data.drop(columns=['Crude_Oil_Demand_1000bpd'])

 

# Create and train an XGBoost model

model = xgb.XGBRegressor()

 

# Define the hyperparameters to search over

param_grid = {

    'learning_rate': [0.1, 0.01, 0.001],

    'n_estimators': [100, 200, 300],

    'max_depth': [3, 4, 5],

    # Add other hyperparameters here

}

 

# Perform grid search for hyperparameter tuning

grid_search = GridSearchCV(model, param_grid, cv=5, scoring='neg_mean_squared_error')

grid_search.fit(X_train, y_train)

 

# Get the best hyperparameters

best_params = grid_search.best_params_

best_model = grid_search.best_estimator_

 

# Predict crude oil demand for the years 2023 to 2025 using the best model

future_predictions = best_model.predict(X_predict)

 

# Add the predicted values to the predict_data DataFrame

predict_data['Predicted_Crude_Oil_Demand_1000bpd'] = future_predictions

 

# Create a plot for actual vs. predicted values

plt.figure(figsize=(10, 6))

plt.plot(data['Year'], data['Crude_Oil_Demand_1000bpd'], label='Actual', marker='o')

plt.plot(predict_data['Year'], predict_data['Predicted_Crude_Oil_Demand_1000bpd'], label='Predicted', marker='x')

plt.xlabel('Year')

plt.ylabel('Crude Oil Demand (1000bpd)')

plt.title('Crude Oil Demand Prediction (2020-2025)')

plt.legend()

plt.grid(True)

 

plt.show()

 

# Print the best hyperparameters

print("Best Hyperparameters:")

print(best_params)
